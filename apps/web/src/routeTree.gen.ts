/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiSplatRouteImport } from './routes/api.$'
import { Route as AppStatusRouteImport } from './routes/_app/status'
import { Route as AppLibraryRouteImport } from './routes/_app/library'
import { Route as AppExploreRouteImport } from './routes/_app/explore'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppAdminRouteImport } from './routes/_app/_admin'
import { Route as AppAdminIndexRouteImport } from './routes/_app/admin/index'
import { Route as AppPlaylistIdRouteImport } from './routes/_app/playlist/$id'
import { Route as AppAdminTracksRouteImport } from './routes/_app/admin/tracks'
import { Route as AppAdminArtistsRouteImport } from './routes/_app/admin/artists'
import { Route as AppAdminAlbumsRouteImport } from './routes/_app/admin/albums'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AppStatusRoute = AppStatusRouteImport.update({
  id: '/status',
  path: '/status',
  getParentRoute: () => AppRoute,
} as any)
const AppLibraryRoute = AppLibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => AppRoute,
} as any)
const AppExploreRoute = AppExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminRoute = AppAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminIndexRoute = AppAdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => AppRoute,
} as any)
const AppPlaylistIdRoute = AppPlaylistIdRouteImport.update({
  id: '/playlist/$id',
  path: '/playlist/$id',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminTracksRoute = AppAdminTracksRouteImport.update({
  id: '/admin/tracks',
  path: '/admin/tracks',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminArtistsRoute = AppAdminArtistsRouteImport.update({
  id: '/admin/artists',
  path: '/admin/artists',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminAlbumsRoute = AppAdminAlbumsRouteImport.update({
  id: '/admin/albums',
  path: '/admin/albums',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AppDashboardRoute
  '/explore': typeof AppExploreRoute
  '/library': typeof AppLibraryRoute
  '/status': typeof AppStatusRoute
  '/api/$': typeof ApiSplatRoute
  '/admin/albums': typeof AppAdminAlbumsRoute
  '/admin/artists': typeof AppAdminArtistsRoute
  '/admin/tracks': typeof AppAdminTracksRoute
  '/playlist/$id': typeof AppPlaylistIdRoute
  '/admin': typeof AppAdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AppDashboardRoute
  '/explore': typeof AppExploreRoute
  '/library': typeof AppLibraryRoute
  '/status': typeof AppStatusRoute
  '/api/$': typeof ApiSplatRoute
  '/admin/albums': typeof AppAdminAlbumsRoute
  '/admin/artists': typeof AppAdminArtistsRoute
  '/admin/tracks': typeof AppAdminTracksRoute
  '/playlist/$id': typeof AppPlaylistIdRoute
  '/admin': typeof AppAdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/_app/_admin': typeof AppAdminRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/explore': typeof AppExploreRoute
  '/_app/library': typeof AppLibraryRoute
  '/_app/status': typeof AppStatusRoute
  '/api/$': typeof ApiSplatRoute
  '/_app/admin/albums': typeof AppAdminAlbumsRoute
  '/_app/admin/artists': typeof AppAdminArtistsRoute
  '/_app/admin/tracks': typeof AppAdminTracksRoute
  '/_app/playlist/$id': typeof AppPlaylistIdRoute
  '/_app/admin/': typeof AppAdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/explore'
    | '/library'
    | '/status'
    | '/api/$'
    | '/admin/albums'
    | '/admin/artists'
    | '/admin/tracks'
    | '/playlist/$id'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/explore'
    | '/library'
    | '/status'
    | '/api/$'
    | '/admin/albums'
    | '/admin/artists'
    | '/admin/tracks'
    | '/playlist/$id'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/_app/_admin'
    | '/_app/dashboard'
    | '/_app/explore'
    | '/_app/library'
    | '/_app/status'
    | '/api/$'
    | '/_app/admin/albums'
    | '/_app/admin/artists'
    | '/_app/admin/tracks'
    | '/_app/playlist/$id'
    | '/_app/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiSplatRoute: typeof ApiSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/status': {
      id: '/_app/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof AppStatusRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/library': {
      id: '/_app/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof AppLibraryRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/explore': {
      id: '/_app/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof AppExploreRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_admin': {
      id: '/_app/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppAdminRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/admin/': {
      id: '/_app/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AppAdminIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/playlist/$id': {
      id: '/_app/playlist/$id'
      path: '/playlist/$id'
      fullPath: '/playlist/$id'
      preLoaderRoute: typeof AppPlaylistIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/admin/tracks': {
      id: '/_app/admin/tracks'
      path: '/admin/tracks'
      fullPath: '/admin/tracks'
      preLoaderRoute: typeof AppAdminTracksRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/admin/artists': {
      id: '/_app/admin/artists'
      path: '/admin/artists'
      fullPath: '/admin/artists'
      preLoaderRoute: typeof AppAdminArtistsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/admin/albums': {
      id: '/_app/admin/albums'
      path: '/admin/albums'
      fullPath: '/admin/albums'
      preLoaderRoute: typeof AppAdminAlbumsRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAdminRoute: typeof AppAdminRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppExploreRoute: typeof AppExploreRoute
  AppLibraryRoute: typeof AppLibraryRoute
  AppStatusRoute: typeof AppStatusRoute
  AppAdminAlbumsRoute: typeof AppAdminAlbumsRoute
  AppAdminArtistsRoute: typeof AppAdminArtistsRoute
  AppAdminTracksRoute: typeof AppAdminTracksRoute
  AppPlaylistIdRoute: typeof AppPlaylistIdRoute
  AppAdminIndexRoute: typeof AppAdminIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAdminRoute: AppAdminRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppExploreRoute: AppExploreRoute,
  AppLibraryRoute: AppLibraryRoute,
  AppStatusRoute: AppStatusRoute,
  AppAdminAlbumsRoute: AppAdminAlbumsRoute,
  AppAdminArtistsRoute: AppAdminArtistsRoute,
  AppAdminTracksRoute: AppAdminTracksRoute,
  AppPlaylistIdRoute: AppPlaylistIdRoute,
  AppAdminIndexRoute: AppAdminIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiSplatRoute: ApiSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
